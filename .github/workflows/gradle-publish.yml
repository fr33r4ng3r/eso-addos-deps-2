# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  push:
    tags:
      - "*"
    
jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}

    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Echo to console
        run: echo ${{ steps.get_version.outputs.VERSION }}

  build:

    runs-on: windows-latest
    needs: [get-version]

    steps:

    - uses: actions/checkout@v2
    - name: Set up JDK 16
      uses: actions/setup-java@v2
      with:
        java-version: '16'
        distribution: 'adopt'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Gradle
      env:
        TAG: ${{ needs.get-version.version }}
      run: gradle jpackage
      
    - id: upload-installer
      name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        path: ./build/jpackage/eso-addon-deps-2-${{ needs.get-version.version }}.msi
        name: windows-installer
        retention-days: 1
        
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [get-version,build]
    steps:

    - id: download-windows-installer
      name: Download Windows installer
      uses: actions/download-artifact@v2
      with:
        name: windows-installer

    - id: create-release
      name: Create GitHub release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.get-version.version }}
        release_name: release-${{ needs.get-version.version }}
        draft: false
        prerelease: false
        
    - id: release-windows-installer
      name: Release Windows installer
      uses: actions/upload-release-asset@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: eso-addon-deps-2-${{ needs.get-version.version }}.msi
        asset_name: eso-addon-deps-2-${{ needs.get-version.version }}.msi
        asset_content_type: application/x-binary        
